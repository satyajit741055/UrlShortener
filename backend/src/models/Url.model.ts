/*Each document should store:

originalUrl – full URL the user submitted
shortId – a unique string (e.g., xYz12) generated by you
user – reference to the user (optional, if URL is tied to login)
clicks – number of times the shortened URL was accessed
createdAt – auto timestamp
analytics – optional array of objects tracking info like:
timestamp
IP address
user-agent / browser
country (if using GeoIP) */


import mongoose, { Schema, Document, Types } from "mongoose";

export interface Url extends Document {
    originalUrl: String;
    shortId: String;
    user?: Types.ObjectId;
    clicks?: number;
    analytics?: {
        timestamp: Date;
        ipAddress: string;
        country: string;
        userAgent?: string;
    }[];
    createdAt?: Date;
    updatedAt?: Date;

}


const UrlSchema: Schema<Url> = new Schema({
    originalUrl: {
        type: String,
        required: true,
    },
    shortId: {
        type: String,
        required: true,
        unique: true
    },
    clicks: {
        type: Number,
        default: 0,
    },
    user: {
        type: Schema.Types.ObjectId,
        ref: "User",
        required: false
    },

    analytics: [
    {
      timestamp: { type: Date, default: Date.now },
      ipAddress: { type: String },
      country: { type: String },
      userAgent: { type: String }
    }
  ]
},{ timestamps: true })


const UrlModel = (mongoose.models.Url as mongoose.Model<Url>) || mongoose.model<Url>('Url', UrlSchema);

export default UrlModel;